== Solution by [[user:codybartfast|codybartfast]] ([[K&R2 solutions:Ancillary:Category numbers|cat 0]]) ==

I guess the question is ambiguous whether we should extend the detab/entab from Chapter 1 or extend the detab/entab from question 5-11.  I assumed we should extend 5-11.  The following supports both custom tab stops and repeating tab stops.  If -m is not specified it repeats tabs starting with the last custom tab or 1 if no custom tabs are specified.  E.g.:
<pre>
detab -59 +10 1 5 9 17 33 65 
</pre>
produces:
<pre>
t0  t1  t2      t3              t4                        t5    t6  t7        t8

^   ^   ^       ^               ^                         ^     ^   ^         ^
1   5   9       17              33                        59    65  69        79
c   c   c       c               c                         R     c   R         R

c = custom tab
R = repeating tab
</pre>
Only tabstops.c is changed from the previous question, detab.c and entab.c are unchanged.
<c>
/* detab.c */

#include <stdio.h>
#include "tabstops.h"

int main(int argc, char *argv[])
{
	int col, c, dist;

	parsestops(argc, argv);

	col = 0;
	while ((c = getchar()) != EOF) {
		if (c == '\t') {
			for (dist = dist2stop(col); dist > 0; --dist) {
				putchar(' ');
				++col;
			}
		} else {
			putchar(c);
			if (c == '\n')
				col = 0;
			else if (c == '\b' && col > 0)
				--col;
			else
				++col;
		}
	}
	return 0;
}
</c>
<c>
/* tabstops.h */

void parsestops(int argc, char *argv[]);
int dist2stop(int col);
int istabstop(int col);
</c>
<c>
/* tabstops.c */

#include <stdio.h>
#include "tabstops.h"

#define MAXARGS 1024
#define NOTSET -1

int custstops[MAXARGS], ncust;
int firstrepeating = NOTSET;
int repeatsize = 8;

int atoi(char *s);
int max(int, int);

int dist2stop(int col)
{
	int rdist, cdist, i;

	rdist = col < firstrepeating ?
			(firstrepeating - col) :
			repeatsize - ((col - firstrepeating) % repeatsize);

	for (i = 0; i < ncust; i++) {
		if (col < custstops[i]) {
			cdist = custstops[i] - col;
			return rdist < cdist ? rdist : cdist;
		}
	}
	return rdist;
}

int istabstop(int col)
{
	return col > 0 && (dist2stop(col - 1) == 1);
}

void parsestops(int argc, char *argv[])
{
	char *vstr, first;
	int val, i;
	int maxcust = 0;

	if (argc > MAXARGS) {
		printf("error: More than %d arguments!\n", MAXARGS);
		return;
	}
	ncust = 0;
	for (i = 1; i < argc; i++) {
		vstr = argv[i];
		first = *vstr;
		if (first == '-' || first == '+')
			vstr++;
		val = atoi(vstr);
		if (first == '-') {
			firstrepeating = val - 1;
		} else if (first == '+')
			repeatsize = val;
		else
			maxcust = max(maxcust, custstops[ncust++] = val - 1);
	}
	/* if no -m then start repeating from last custom stop */
	firstrepeating = firstrepeating == NOTSET ? maxcust : firstrepeating;
}

int atoi(char *s)
{
	int i, n = 0;

	for (i = 0; s[i] >= '0' && s[i] <= '9'; ++i)
		n = 10 * n + (s[i] - '0');
	return n;
}

int max(int a, int b)
{
	return a >= b ? a : b;
}
</c>
<c>
/* entab.c */

#include <stdio.h>
#include "tabstops.h"

int main(int argc, char *argv[])
{
	int col, c, nspace;

	parsestops(argc, argv);

	col = nspace = 0;
	while ((c = getchar()) != EOF) {
		if (c == '\b' && col > 0) {
			--col;
			if (nspace > 0)
				--nspace;
			else
				putchar(c);
		} else if (nspace > 0 && istabstop(col)) {
			if (nspace == 1)
				putchar(' ');
			else
				putchar('\t');
			nspace = 0;
		}
		if (c == '\t') {
			putchar(c);
			nspace = 0;
			col = col + dist2stop(col);
		} else if (c == ' ') {
			++col;
			++nspace;
		} else if (c != '\b') {
			for (; 0 < nspace; --nspace)
				putchar(' ');
			putchar(c);
			if (c == '\n')
				col = 0;
			else
				++col;
		}
	}
	return 0;
}
</c>
